import lingo/pegcode/driver;
import runtime;
import string;

Program(varDecls: VarDeclSection, statement: Statement);
VarDeclSection(decls: [VarDecl]);
VarDecl(varName: string, varType: string);
Statement ::= Assignement, Sequence, Test, NonDetChoice, NonDetIteration;
    Assignement(varName: string, value: Expr);
    Sequence(sequence: [Statement]);
    Test(pred: Expr);
    NonDetChoice(choice: [Statement]);
    NonDetIteration(iteratee: Statement);



BinaryOp ::= Sum, Minus, Mult, Div, MoreThan, MoreThanEqual, LessThan, LessThanEqual, Equal;
    Sum();
    Minus();
    Mult();
    Div();
    MoreThan();
    MoreThanEqual();
    LessThan();
    LessThanEqual();
    Equal();
FuncArgs(args: [Expr]);
Expr ::= Int, Id, FunctionCall, ArrayConst, True, False;
    ArrayConst(elems: [Expr]);
    ArithExpr(lhs: Expr, rhs: Expr, op: BinaryOp);
    Int(val: int);
    FunctionCall(funcName: string, args: FuncArgs);
    Id(name: string);
    True();
    False();


stringToAst(str : string) -> Program {
    parsic(
        lingoGrammar(), 
        str,
        defaultPegActions
        // SemanticActions(setTree(defaultPegActions.t, "createProgram", \s -> ArInt(s[0])))
    );
}

// Singleton keeping the compiled grammar
lingoGrammarOp : ref Maybe<[PegOp]> = ref None();

lingoGrammar() {
	// Prepare the grammar in the given file using flow syntax for inlining a string from a file
	// but be sure to only do this once
	onlyOnce(lingoGrammarOp, \ -> {
		compilePegGrammar("#include ./nemo.lingo");
	});
}


VmText(commands: [VmCommand]);
VmCommand ::= AssignementCommand, BranchCommand;
    AssignementCommand(label: int, lhsName: string, newVal: Expr, gotos: [int]);
    BranchCommand(label: int, cond: Expr, thens: [int], elses: [int]);

maxLabel(text: VmText) -> int {
    1 + fold(text.commands, -1, \maxLabel, nextInstruction ->  {
            switch(nextInstruction) {
                AssignementCommand(label, lhsName, newVal, gotos): {
                    if (label > maxLabel) label else maxLabel
                }
                BranchCommand(label, cond, thens, elses): {
                    if (label > maxLabel) label else maxLabel
                }
            }
        }
    )
}

shiftLabels(text: VmText, delta: int) -> VmText {
    VmText(
        map(
            text.commands,
            \command -> {
                switch(command) {
                    AssignementCommand(label, lhsName, newVal, gotos): {
                        AssignementCommand(label + delta, lhsName, newVal, shiftArr(gotos, delta))
                    }
                    BranchCommand(label, cond, thens, elses): {
                        BranchCommand(label + delta, cond, shiftArr(thens, delta), shiftArr(elses, delta))
                    }
                }
            }
        )
    )
}

substituteLabels(text: VmText, oldLabel: int, newLabel: int) -> VmText {
    VmText(
        map(
            text.commands,
            \command -> {
                switch(command) {
                    AssignementCommand(label, lhsName, newVal, gotos): {
                        AssignementCommand(subst(label, oldLabel, newLabel), lhsName, newVal, map(gotos, \x -> subst(x, oldLabel, newLabel)))
                    }
                    BranchCommand(label, cond, thens, elses): {
                        BranchCommand(subst(label, oldLabel, newLabel), cond, map(thens, \x -> subst(x, oldLabel, newLabel)), map(elses, \x -> subst(x, oldLabel, newLabel)))
                    }
                }
            }
        )
    )
}

shiftArr(labels: [int], delta: int) {
    map(labels, \x -> x + delta)
}

subst(cur: int, old: int, new: int) -> int {
    if (cur == old) {
        new
    } else {
        cur
    }
}

    // AssignementCommand(label: int, lhsName: string, newVal: Expr, gotos: [int]);
    // BranchCommand(label: int, cond: Expr, thens: [int], elses: [int]);
    // NonDetChoice(choice: [Statement]);
    // NonDetIteration(iteratee: Statement);
compileStatement(stat: Statement) -> VmText {
    switch(stat) {
        Assignement(varName, value): {
            VmText([AssignementCommand(0, varName, value, [1])])
        }
        Sequence(sequence): {
            if (length(sequence) == 0) {
                VmText([BranchCommand(0, True(), [], [])])
            } else {
                first = compileStatement(sequence[0]);
                fold(tail(sequence), first, \acc, next -> {
                    end = maxLabel(acc);
                    nextCompiled = shiftLabels(compileStatement(next), end);
                    VmText(concat(acc.commands, nextCompiled.commands))
                })
            }
        }
        Test(pred): {
            VmText([BranchCommand(0, pred, [1], [])])
        }
        NonDetChoice(choice): {
            first = compileStatement(choice[0]); // always non empty by grammar
            fold(tail(choice), first, \acc, next -> {
                s = shiftLabels(acc, 1);
                end = maxLabel(s);
                nextCompiled = shiftLabels(compileStatement(next), end);
                end2 = maxLabel(nextCompiled);
                VmText(
                    concat3(
                        [BranchCommand(0, True(), [1, end], [])],
                        substituteLabels(acc, end, end2).commands,
                        nextCompiled.commands
                    )
                )
            })
        }
        NonDetIteration(iteratee): {
            s = shiftLabels(compileStatement(iteratee), 1);
            end = maxLabel(s);
            VmText(concat([BranchCommand(0, True(), [1, end], [])], substituteLabels(s, end, 0).commands))
        }
    }
}

compile(ast: Program) -> VmText {
    compileStatement(ast.statement)
}

main() {
    programText = getFileContent("./program1.nemo");
    ast : Program = stringToAst(programText);
    println("AST:");
    println(ast);

    println("compiled:");
    println(compile(ast));
}

// flowcpp --no-jit ../../lib/lingo/pegcode/pegcompiler.flow -- file=./nemo.lingo testfile=program.nemo result=1
