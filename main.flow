import lingo/pegcode/driver;
import runtime;
import string;

Program(varDecls: VarDeclSection, statement: Statement);
VarDeclSection(decls: [VarDecl]);
VarDecl(varName: string, varType: string);
Statement ::= Assignement, Sequence, Test, NonDetChoice, NonDetIteration;
    Assignement(varName: string, value: Expr);
    Sequence(sequence: [Statement]);
    Test(pred: Expr);
    NonDetChoice(choice: [Statement]);
    NonDetIteration(iteratee: Statement);



FuncArgs(args: [Expr]);
Expr ::= Sum, Mult, Int, Id, FunctionCall, ArrayConst;
    ArrayConst(elems: [Expr]);
    Sum(lhs : Expr, rhs : Expr);
    Mult(lhs : Expr, rhs : Expr);
    Int(val: int);
    FunctionCall(funcName: string, args: FuncArgs);
    Id(name: string);


stringToAst(str : string) -> Program {
    parsic(
        lingoGrammar(), 
        str,
        defaultPegActions
        // SemanticActions(setTree(defaultPegActions.t, "createProgram", \s -> ArInt(s[0])))
    );
}

// Singleton keeping the compiled grammar
lingoGrammarOp : ref Maybe<[PegOp]> = ref None();

lingoGrammar() {
	// Prepare the grammar in the given file using flow syntax for inlining a string from a file
	// but be sure to only do this once
	onlyOnce(lingoGrammarOp, \ -> {
		compilePegGrammar("#include ./nemo.lingo");
	});
}

mainCock() {
    programText = getFileContent("./program.nemo");
    expr1 : Program = stringToAst(programText);
    println(expr1);
}

// flowcpp --no-jit ../../lib/lingo/pegcode/pegcompiler.flow -- file=./nemo.lingo testfile=program.nemo result=1
