program = ws varDeclSection:varDeclSection ws statement:stat ws { Program(:varDeclSection, :stat) };

varDeclSection = (varDecl)*:decls { VarDeclSection(:decls) };
varDecl = "VAR" ws id$varName ws ":"  ws id$varType ws statementEnd  { VarDecl($varName, $varType) } ;

statementEnd = ";" ws;

statement = assignement
          | test
          | nonDetChoice
          | nonDetIteration
          | sequence;


assignement = id$varName ws ":=" ws expr:exprValue ws statementEnd { Assignement($varName, :exprValue) };
sequence = "{" ws (statement)*:seq  ws "}" { Sequence(:seq) };
test = expr:pred ws "?" ws statementEnd { Test(:pred) };
nonDetChoice = "{" ws statement:stat1 ws U ws statement:stat2 ws (ws U ws statement)*:stats ws "}" ws { NonDetChoice(consArray(:stat1, consArray(:stat2, :stats))) };
nonDetIteration = "{" ws statement:stat ws "}" /*no ws*/ "*" ws { NonDetIteration(:stat) };

U = ws "U" ws;

expr = sum | mul | int | functionCall | arrayConst | id;

arrayConst = arrayEmpty | "[" ws arrayContent:cont ws "]" { :cont } ;
arrayContent =  expr:elem ws leftover*:leftovers { ArrayConst(consArray(:elem, :leftovers)) };
leftover = (ws "," ws expr);
arrayEmpty = "[" ws "]"  { ArrayConst(emptyArray()) };

functionCall = id$funcName ws "(" ws funcArgs:args ws ")" { FunctionCall($funcName, :args) };
funcArgs = nonEmptyArgs | () { FuncArgs(emptyArray()) } ;
nonEmptyArgs = expr:arg ws leftover*:leftovers { FuncArgs(consArray(:arg, :leftovers)) } ; 

sum = "(" ws expr:l ws "+" ws expr:r ws ")" { Sum(:l, :r)};
mul = "(" ws expr:l ws "*" ws expr:r ws ")" { Mult(:l, :r)};
int = digit+ $s { Int(s2i($s)) };


digit = '0'-'9';
ws = (' ' | '\t' | '\n' | '\r')*;
id = (('a'-'z' | 'A'-'Z') ('a'-'z' | 'A' - 'Z' | '0' -'9')*)$id  { Id($id) };


